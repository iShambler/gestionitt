from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service as ChromeService
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.chrome.options import Options  # ‚úÖ Import necesario
from datetime import datetime, timedelta
from openai import OpenAI
from dotenv import load_dotenv
import time, json, os

# --- CARGAR VARIABLES DEL .env ---
load_dotenv()  # Carga OPENAI_API_KEY, INTRA_USER, INTRA_PASS, etc.
# -------------------

# --- CONFIGURAR ---
LOGIN_URL = os.getenv("URL_PRIVADA")
USERNAME = os.getenv("INTRA_USER")
PASSWORD = os.getenv("INTRA_PASS")
USERNAME_SELECTOR = '#usuario'
PASSWORD_SELECTOR = '#password'
SUBMIT_SELECTOR = '#btAceptar'
CALENDAR_BUTTON_SELECTOR = '.ui-datepicker-trigger'
VOLVER_SELECTOR = '#btVolver'
BUSCADOR_INPUT_SELECTOR = '#textoBusqueda'
BUSCADOR_BOTON_SELECTOR = '#buscar'
# -------------------

# Crear cliente OpenAI con la clave del .env
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# ---------------------------------------------------------------------
# üöÄ CREAR DRIVER HEADLESS (nuevo para Render o servidores sin GUI)
# ---------------------------------------------------------------------
def crear_driver_headless():
    """Crea un navegador Chrome en modo headless, ideal para Render o ejecuci√≥n sin interfaz."""
    chrome_options = Options()
    chrome_options.add_argument("--headless=new")            # Ejecutar sin ventana
    chrome_options.add_argument("--no-sandbox")              # Requerido por Render
    chrome_options.add_argument("--disable-dev-shm-usage")   # Evita errores de memoria compartida
    chrome_options.add_argument("--disable-gpu")             # Acelera en entornos sin GPU
    chrome_options.add_argument("--window-size=1920,1080")   # Fija tama√±o de pantalla virtual
    chrome_options.add_argument("--disable-blink-features=AutomationControlled")
    chrome_options.add_argument("--disable-extensions")
    
    service = ChromeService(ChromeDriverManager().install())
    driver = webdriver.Chrome(service=service, options=chrome_options)
    return driver


# ---------------------------------------------------------------------
# FUNCIONES BASE
# ---------------------------------------------------------------------
def save_cookies(driver, path="cookies.json"):
    with open(path, "w") as f:
        json.dump(driver.get_cookies(), f)

def lunes_de_semana(fecha):
    return fecha - timedelta(days=fecha.weekday())

def hacer_login(driver, wait):
    """Realiza el login en la intranet."""
    driver.get(LOGIN_URL)
    usr = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, USERNAME_SELECTOR)))
    usr.clear()
    usr.send_keys(USERNAME)
    pwd = driver.find_element(By.CSS_SELECTOR, PASSWORD_SELECTOR)
    pwd.clear()
    pwd.send_keys(PASSWORD)
    driver.find_element(By.CSS_SELECTOR, SUBMIT_SELECTOR).click()
    time.sleep(3)
    print("‚úÖ Login completado.")

def volver_inicio(driver):
    """Pulsa el bot√≥n 'Volver' para regresar a la pantalla principal tras login."""
    try:
        btn_volver = driver.find_element(By.CSS_SELECTOR, VOLVER_SELECTOR)
        btn_volver.click()
        time.sleep(2)
        print("‚Ü©Ô∏è Volviendo a la pantalla principal...")
    except Exception as e:
        print(f"‚ö†Ô∏è No se pudo pulsar el bot√≥n Volver: {e}")

def seleccionar_fecha(driver, fecha_obj):
    """Abre el calendario, navega hasta el mes correcto y selecciona el d√≠a correspondiente."""
    wait = WebDriverWait(driver, 15)
    wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, CALENDAR_BUTTON_SELECTOR))).click()
    wait.until(EC.visibility_of_element_located((By.CSS_SELECTOR, ".ui-datepicker-calendar")))

    titulo_selector = ".ui-datepicker-title"
    meses = {
        "enero": 1, "febrero": 2, "marzo": 3, "abril": 4, "mayo": 5, "junio": 6,
        "julio": 7, "agosto": 8, "septiembre": 9, "octubre": 10, "noviembre": 11, "diciembre": 12
    }


    def obtener_mes_anio_actual():
        """Obtiene el mes y a√±o visibles actualmente en el calendario."""
        try:
            titulo = wait.until(EC.visibility_of_element_located((By.CSS_SELECTOR, titulo_selector)))
            texto = titulo.text.lower().strip()
            partes = texto.split()

            # Asegura que hay al menos dos partes (mes y a√±o)
            if len(partes) < 2:
                raise ValueError(f"Formato inesperado del t√≠tulo del calendario: {texto}")

            mes_visible = meses.get(partes[0], 1)
            anio_visible = int(partes[1])

            return mes_visible, anio_visible
        except Exception as e:
            print(f"‚ö†Ô∏è Error obteniendo mes/a√±o actual: {e}")
            return fecha_obj.month, fecha_obj.year

    # üìÜ Obtener mes/a√±o actual
    mes_visible, anio_visible = obtener_mes_anio_actual()

    # üîÅ Navegar hasta el mes/a√±o correcto
    while (anio_visible, mes_visible) < (fecha_obj.year, fecha_obj.month):
        try:
            btn_next = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, ".ui-datepicker-next")))
            driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", btn_next)
            btn_next.click()
            time.sleep(0.4)
            mes_visible, anio_visible = obtener_mes_anio_actual()
        except Exception:
            break

    while (anio_visible, mes_visible) > (fecha_obj.year, fecha_obj.month):
        try:
            btn_prev = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, ".ui-datepicker-prev")))
            driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", btn_prev)
            btn_prev.click()
            time.sleep(0.4)
            mes_visible, anio_visible = obtener_mes_anio_actual()
        except Exception:
            break

    # üìÖ Seleccionar el d√≠a
    dia_seleccionado = fecha_obj.day
    print(f"üìÖ Seleccionando {dia_seleccionado}/{fecha_obj.month}/{fecha_obj.year}")

    try:
        dia_xpath = f"//a[normalize-space(text())='{dia_seleccionado}']"
        elemento_dia = wait.until(EC.element_to_be_clickable((By.XPATH, dia_xpath)))
        driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", elemento_dia)
        elemento_dia.click()
        print(f"‚úÖ Fecha seleccionada correctamente: {fecha_obj.strftime('%d/%m/%Y')}")
    except Exception as e:
        print(f"‚ö†Ô∏è No se pudo seleccionar el d√≠a {dia_seleccionado}: {e}")



# ---------------------------------------------------------------------
# NUEVA FUNCI√ìN: SELECCIONAR PROYECTO
# ---------------------------------------------------------------------
def seleccionar_proyecto(driver, wait, nombre_proyecto):
    """
    Selecciona el proyecto en la tabla de imputaci√≥n.
    Si ya existe una l√≠nea con ese proyecto, la reutiliza.
    Si no existe, crea una nueva l√≠nea, abre el buscador,
    busca el proyecto y lo selecciona.
    """

    def linea_proyecto_existente(nombre_proyecto):
        """Comprueba si ya existe una l√≠nea con ese proyecto en la tabla."""
        try:
            filas = driver.find_elements(By.CSS_SELECTOR, "tr[id^='listaEmpleadoHoras']")
            for fila in filas:
                texto = fila.text.lower()
                if nombre_proyecto.lower() in texto:
                    print(f"üß© Proyecto '{nombre_proyecto}' ya existe, reutilizando l√≠nea existente.")
                    driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", fila)
                    try:
                        fila.click()
                    except Exception:
                        pass
                    time.sleep(0.3)
                    return True
            return False
        except Exception as e:
            print(f"‚ö†Ô∏è Error buscando l√≠nea existente: {e}")
            return False

    try:
        # Si el proyecto ya existe, no a√±adimos una nueva l√≠nea
        if linea_proyecto_existente(nombre_proyecto):
            return

        # 1Ô∏è‚É£ Pulsar en "A√±adir L√≠nea"
        print("üÜï A√±adiendo nueva l√≠nea de imputaci√≥n...")
        btn_nueva_linea = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, "#btNuevaLinea")))
        driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", btn_nueva_linea)
        btn_nueva_linea.click()
        time.sleep(1)

        # 2Ô∏è‚É£ Pulsar en el bot√≥n "¬ª" para abrir el buscador
        print("üîç Abriendo buscador de proyectos...")
        btn_cambiar = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, "#btCambiarSubproyecto")))
        driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", btn_cambiar)
        btn_cambiar.click()
        time.sleep(0.8)

        # 3Ô∏è‚É£ Esperar a que aparezca el campo de b√∫squeda
        print("‚åõ Esperando campo de b√∫squeda...")
        campo_buscar = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, "#textoBusqueda")))
        campo_buscar.clear()
        campo_buscar.send_keys(nombre_proyecto)

        # 4Ô∏è‚É£ Pulsar en el bot√≥n "Buscar"
        print(f"üîé Buscando proyecto: {nombre_proyecto}")
        btn_buscar = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, "#buscar")))
        driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", btn_buscar)
        btn_buscar.click()
        time.sleep(1.2)

        # 5Ô∏è‚É£ Asegurar que el √°rbol se expanda completamente
        print("üå≥ Expandiendo √°rbol de resultados...")
        driver.execute_script("""
            const tree = document.querySelector('#treeTipologia');
            if (tree && typeof $(tree).jstree === 'function') {
                $(tree).jstree('open_all');
            }
        """)

        time.sleep(1)

        # 6Ô∏è‚É£ Buscar y seleccionar el proyecto
        print("üìÇ Buscando y seleccionando el proyecto en el √°rbol...")
        xpath = (
            f"//li[@rel='subproyectos']//a[contains(translate(normalize-space(.), "
            f"'ABCDEFGHIJKLMNOPQRSTUVWXYZ√Å√â√ç√ì√ö√ú', 'abcdefghijklmnopqrstuvwxyz√°√©√≠√≥√∫√º'), "
            f"'{nombre_proyecto.lower()}')]"
        )

        elemento = wait.until(EC.element_to_be_clickable((By.XPATH, xpath)))
        driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", elemento)
        elemento.click()
        print(f"‚úÖ Proyecto '{nombre_proyecto}' seleccionado correctamente.")
        time.sleep(1.5)

    except Exception as e:
        print(f"‚ö†Ô∏è No se pudo seleccionar el proyecto '{nombre_proyecto}': {e}")


def imputar_horas_semana(driver, wait):
    """
    Imputa las horas de lunes a viernes en la l√≠nea actual.
    h1 = lunes ... h5 = viernes
    Lunes a jueves -> 8.5 horas
    Viernes -> 6.5 horas
    Si un campo no est√° disponible (festivo, deshabilitado, etc.), lo omite.
    """
    print("üïí Imputando horas de lunes a viernes...")

    horas_semana = {
        "h1": "8.5",  # Lunes
        "h2": "8.5",  # Martes
        "h3": "8.5",  # Mi√©rcoles
        "h4": "8.5",  # Jueves
        "h5": "6.5",  # Viernes
    }

    for dia, valor in horas_semana.items():
        try:
            input_selector = f"input[id^='listaEmpleadoHoras'][id$='.{dia}']"
            campo = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, input_selector)))

            # üîç Asegurar que el campo est√© visible (headless no lo muestra por defecto)
            driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", campo)
            time.sleep(0.1)

            if campo.is_enabled():
                campo.clear()
                campo.send_keys(valor)
                print(f"‚úÖ D√≠a {dia.upper()} ‚Üí {valor} horas")
                time.sleep(0.3)
            else:
                print(f"‚ö†Ô∏è D√≠a {dia.upper()} no editable (festivo o bloqueo)")

        except Exception as e:
            print(f"‚ö†Ô∏è D√≠a {dia.upper()} no disponible (omitido): {e}")

    print("‚úÖ Imputaci√≥n semanal completada.")


def imputar_horas_dia(driver, wait, dia, horas):
    """
    Imputa una cantidad espec√≠fica de horas en un d√≠a concreto (lunes a viernes)
    dentro de la l√≠nea actual de imputaci√≥n. Si ya hay horas, las suma.
    """
    mapa_dias = {
        "lunes": "h1",
        "martes": "h2",
        "mi√©rcoles": "h3",
        "miercoles": "h3",
        "jueves": "h4",
        "viernes": "h5"
    }

    dia_clave = mapa_dias.get(dia.lower())
    if not dia_clave:
        print(f"‚ö†Ô∏è D√≠a no reconocido: {dia}")
        return

    try:
        input_selector = f"input[id^='listaEmpleadoHoras'][id$='.{dia_clave}']"
        campo = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, input_selector)))

        # üîç Scroll para asegurar visibilidad en headless
        driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", campo)
        time.sleep(0.1)

        if campo.is_enabled():
            valor_actual = campo.get_attribute("value") or "0"
            try:
                valor_actual = float(valor_actual.replace(",", "."))
            except ValueError:
                valor_actual = 0.0

            nuevas_horas = float(horas)
            total = round(valor_actual + nuevas_horas, 2)

            campo.clear()
            campo.send_keys(str(total))

            print(f"‚úÖ {dia.capitalize()} ‚Üí {nuevas_horas} horas a√±adidas (total {total}).")
        else:
            print(f"‚ö†Ô∏è El campo de {dia} no est√° habilitado.")
    except Exception as e:
        print(f"‚ö†Ô∏è No se pudo imputar horas en {dia}: {e}")


def guardar_linea(driver, wait):
    """Pulsa el bot√≥n 'Guardar' tras imputar horas."""
    try:
        btn_guardar = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, "#btGuardarLinea")))
        driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", btn_guardar)
        time.sleep(0.1)
        btn_guardar.click()
        time.sleep(1.5)
        print("üíæ L√≠nea guardada correctamente.")
    except Exception as e:
        print(f"‚ö†Ô∏è No se pudo pulsar el bot√≥n Guardar: {e}")


def emitir_linea(driver, wait):
    """Pulsa el bot√≥n 'Emitir' tras imputar horas."""
    try:
        btn_emitir = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, "#btEmitir")))
        driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", btn_emitir)
        time.sleep(0.1)
        btn_emitir.click()
        time.sleep(1.5)
        print("üì§ L√≠nea emitida correctamente.")
    except Exception as e:
        print(f"‚ö†Ô∏è No se pudo pulsar el bot√≥n Emitir: {e}")


def iniciar_jornada(driver, wait):
    """
    Pulsa el bot√≥n 'Inicio jornada' si est√° disponible.
    Si el bot√≥n no est√° o ya se ha pulsado, lo ignora.
    """
    print("üïí Intentando iniciar jornada...")

    try:
        btn_inicio = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, "#botonInicioJornada")))
        driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", btn_inicio)
        time.sleep(0.1)

        if btn_inicio.is_enabled():
            btn_inicio.click()
            time.sleep(2)
            print("‚úÖ Jornada iniciada correctamente.")
        else:
            print("‚ö†Ô∏è El bot√≥n de inicio de jornada no est√° habilitado (posible jornada ya iniciada).")

    except Exception as e:
        print(f"‚ö†Ô∏è No se pudo iniciar la jornada: {e}")


def finalizar_jornada(driver, wait):
    """
    Pulsa el bot√≥n 'Finalizar jornada' si est√° disponible.
    Si el bot√≥n no est√° o ya se ha pulsado, lo ignora.
    """
    print("üïì Intentando finalizar jornada...")

    try:
        btn_fin = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, "#botonFinJornada")))
        driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", btn_fin)
        time.sleep(0.1)

        if btn_fin.is_enabled():
            btn_fin.click()
            time.sleep(2)
            print("‚úÖ Jornada finalizada correctamente.")
        else:
            print("‚ö†Ô∏è El bot√≥n de finalizar jornada no est√° habilitado (posible jornada ya cerrada).")

    except Exception as e:
        print(f"‚ö†Ô∏è No se pudo finalizar la jornada: {e}")



# ---------------------------------------------------------------------
# INTERPRETACI√ìN REAL CON GPT (versi√≥n robusta para Render)
# ---------------------------------------------------------------------
def interpretar_con_gpt(texto):
    """
    Traduce la frase del usuario en una lista de comandos JSON para automatizar
    la imputaci√≥n de horas en la intranet.

    Acciones posibles:
    - seleccionar_fecha (requiere 'fecha' en formato YYYY-MM-DD)
    - volver
    - seleccionar_proyecto (requiere 'nombre')
    - imputar_horas_dia (requiere 'dia' y 'horas')
    - imputar_horas_semana
    - iniciar_jornada
    - finalizar_jornada

    Reglas:
    1. Siempre asume que el a√±o es 2025.
    2. Si el usuario dice "esta semana", "la pr√≥xima", etc., genera el lunes de esa semana en 2025.
    3. Si mezcla acciones ("imputa horas en el proyecto X la semana del 7 de octubre"),
       el orden debe ser: fecha ‚Üí proyecto ‚Üí imputaci√≥n ‚Üí guardar/emitir ‚Üí volver.
    4. Devuelve SOLO JSON v√°lido.
    5. Si no se puede interpretar algo, se ignora.
    """

    prompt = f"""
Eres un asistente que traduce frases en una lista de comandos JSON para automatizar
una web de imputaci√≥n de horas.

Acciones v√°lidas:
- seleccionar_fecha (requiere "fecha" en formato YYYY-MM-DD)
- volver
- seleccionar_proyecto (requiere "nombre")
- imputar_horas_dia (requiere "dia" y "horas")
- imputar_horas_semana
- iniciar_jornada
- finalizar_jornada

Reglas:
1Ô∏è‚É£ Siempre usa el a√±o 2025 aunque el usuario no lo diga.
2Ô∏è‚É£ Si el usuario menciona varios proyectos y horas en la misma frase (por ejemplo
   "3.5 en Desarrollo y 2 en Direcci√≥n el lunes"), genera varias acciones en orden:
   seleccionar_proyecto ‚Üí imputar_horas_dia ‚Üí seleccionar_proyecto ‚Üí imputar_horas_dia.
3Ô∏è‚É£ Si el usuario menciona palabras como "expide", "emite", "env√≠a", "env√≠alo", "exp√≠delo" o similares,
   a√±ade una acci√≥n {{ "accion": "emitir_linea" }} al final de la secuencia.
4Ô∏è‚É£ Si no menciona ninguna de esas palabras, a√±ade {{ "accion": "guardar_linea" }} despu√©s de imputar horas.
5Ô∏è‚É£ Si el usuario dice "esta semana", "la pr√≥xima semana", etc., genera el lunes correspondiente en 2025.
6Ô∏è‚É£ Solo incluye {{ "accion": "iniciar_jornada" }} si el usuario dice expl√≠citamente
   "inicia jornada", "empieza jornada", "comienza el d√≠a", etc.
7Ô∏è‚É£ Devuelve SOLO JSON v√°lido, sin texto ni comentarios.
8Ô∏è‚É£ Orden de las acciones:
   seleccionar_fecha ‚Üí seleccionar_proyecto ‚Üí imputar_horas_dia ‚Üí imputar_horas_semana ‚Üí guardar/emitir ‚Üí volver

Ejemplo de salida correcta:
[
  {{ "accion": "iniciar_jornada" }},
  {{ "accion": "seleccionar_fecha", "parametros": {{ "fecha": "2025-10-06" }} }},
  {{ "accion": "seleccionar_proyecto", "parametros": {{ "nombre": "Desarrollo" }} }},
  {{ "accion": "imputar_horas_semana" }}
]

Frase del usuario: "{texto}"
"""

    try:
        # üîÅ Solicitud al modelo
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": "Eres un traductor de lenguaje natural a comandos JSON v√°lidos."},
                {"role": "user", "content": prompt}
            ],
            temperature=0,
        )

        raw = response.choices[0].message.content.strip()
        print("üß† [DEBUG GPT] Respuesta cruda:", raw)

        # üß© Limpieza preventiva de texto extra√±o
        raw = raw.strip("` \n\t")
        if raw.startswith("json"):
            raw = raw[4:].strip()

        # A veces el modelo devuelve texto rodeado de ```json ... ```
        if raw.startswith("```"):
            raw = raw.strip("```").replace("json", "").strip()

        # Intentar parsear JSON
        try:
            data = json.loads(raw)
        except json.JSONDecodeError as e:
            print("‚ö†Ô∏è Error al decodificar JSON:", e)
            print("üîç Contenido problem√°tico:", raw)
            return []

        # Aceptar tanto lista como dict
        if isinstance(data, dict):
            data = [data]

        # üîß Reordenar acciones en orden l√≥gico
        orden_correcto = [
            "iniciar_jornada",
            "seleccionar_fecha",
            "seleccionar_proyecto",
            "imputar_horas_dia",
            "imputar_horas_semana",
            "guardar_linea",
            "emitir_linea",
            "finalizar_jornada",
            "volver"
        ]
        data = sorted(
            data,
            key=lambda x: orden_correcto.index(x["accion"])
            if x.get("accion") in orden_correcto else 99
        )

        print("‚úÖ [DEBUG GPT] Interpretaci√≥n final:", data)
        return data

    except Exception as e:
        print("‚ùå Error interpretando respuesta del modelo:", e)
        return []



# ---------------------------------------------------------------------
# EJECUTAR ACCI√ìN (versi√≥n robusta para Render / headless)
# ---------------------------------------------------------------------
def ejecutar_accion(driver, wait, orden):
    """Ejecuta una acci√≥n interpretada del GPT con control de errores y logs claros."""
    accion = orden.get("accion")

    if not accion:
        print(f"‚ö†Ô∏è Orden inv√°lida o sin campo 'accion': {orden}")
        return

    print(f"üöÄ Ejecutando acci√≥n ‚Üí {accion}")

    try:
        # üïí Iniciar jornada
        if accion == "iniciar_jornada":
            iniciar_jornada(driver, wait)

        # üïì Finalizar jornada
        elif accion == "finalizar_jornada":
            finalizar_jornada(driver, wait)

        # üßÆ Imputar horas de un d√≠a
        elif accion == "imputar_horas_dia":
            dia_param = orden.get("parametros", {}).get("dia")
            horas = float(orden.get("parametros", {}).get("horas", 0))
            if not dia_param:
                print("‚ö†Ô∏è No se especific√≥ el d√≠a en imputar_horas_dia.")
                return

            # Convertir fecha completa a nombre de d√≠a si aplica
            try:
                fecha_obj = datetime.fromisoformat(dia_param)
                dia = fecha_obj.strftime("%A").lower()
                dias_map = {
                    "monday": "lunes",
                    "tuesday": "martes",
                    "wednesday": "mi√©rcoles",
                    "thursday": "jueves",
                    "friday": "viernes",
                }
                dia = dias_map.get(dia, dia)
            except Exception:
                dia = dia_param.lower()

            imputar_horas_dia(driver, wait, dia, horas)

        # üìÖ Seleccionar fecha
        elif accion == "seleccionar_fecha":
            fecha_str = orden.get("parametros", {}).get("fecha")
            if not fecha_str:
                print("‚ö†Ô∏è No se especific√≥ fecha en seleccionar_fecha.")
                return

            try:
                fecha = datetime.fromisoformat(fecha_str)
                seleccionar_fecha(driver, fecha)
            except Exception as e:
                print(f"‚ùå No se pudo procesar la fecha '{fecha_str}': {e}")

        # ‚Ü©Ô∏è Volver
        elif accion == "volver":
            volver_inicio(driver)

        # üìÇ Seleccionar proyecto
        elif accion == "seleccionar_proyecto":
            nombre = orden.get("parametros", {}).get("nombre")
            if not nombre:
                print("‚ö†Ô∏è No se especific√≥ el nombre del proyecto.")
                return
            seleccionar_proyecto(driver, wait, nombre)

        # ‚è±Ô∏è Imputar horas semanales
        elif accion == "imputar_horas_semana":
            imputar_horas_semana(driver, wait)

        # üíæ Guardar l√≠nea
        elif accion == "guardar_linea":
            guardar_linea(driver, wait)

        # üì§ Emitir l√≠nea
        elif accion == "emitir_linea":
            emitir_linea(driver, wait)

        else:
            print(f"ü§î Acci√≥n desconocida o no implementada: {accion}")

    except Exception as e:
        print(f"‚ùå Error ejecutando '{accion}': {e}")


# ---------------------------------------------------------------------
# MAIN LOOP (adaptado para Render/headless)
# ---------------------------------------------------------------------
def main():
    """Inicializa el navegador (headless en Render), hace login y ejecuta comandos."""
    print("üöÄ Iniciando asistente de imputaci√≥n de horas con GPT + Selenium...")

    try:
        driver = crear_driver_headless()  # ‚úÖ usa la funci√≥n headless definida antes
        wait = WebDriverWait(driver, 15)

        # üöÄ Login autom√°tico
        hacer_login(driver, wait)

        print("\nüß† Asistente con IA (OpenAI) para imputaci√≥n de horas")
        print("Ya est√°s logueado en el sistema.")
        print("Puedes decir cosas como:")
        print(" - 'selecciona la semana del 7 de octubre'")
        print(" - 'abre el proyecto Estudio/Investigaci√≥n de tecnolog√≠a'")
        print(" - 'vuelve a la pantalla principal'")
        print("Escribe 'salir' para terminar.\n")

        while True:
            try:
                texto = input("üó£Ô∏è  > ")
            except EOFError:
                # Render o ejecuci√≥n sin stdin
                print("‚ÑπÔ∏è Entorno sin entrada interactiva. Finalizando.")
                break

            if texto.lower() in ["salir", "exit", "quit"]:
                break

            # üß† Interpretar instrucci√≥n con GPT
            ordenes = interpretar_con_gpt(texto)
            print("üßæ Interpretaci√≥n:", ordenes)

            # üîÑ Ordenar: siempre primero la fecha
            ordenes = sorted(ordenes, key=lambda o: 0 if o.get("accion") == "seleccionar_fecha" else 1)

            # Ejecutar cada acci√≥n interpretada
            for orden in ordenes:
                ejecutar_accion(driver, wait, orden)

    except Exception as e:
        print(f"üí• Error cr√≠tico en main(): {e}")

    finally:
        try:
            driver.quit()
        except Exception:
            pass
        print("üîö Navegador cerrado correctamente.")
        
if __name__ == "__main__":
    main()